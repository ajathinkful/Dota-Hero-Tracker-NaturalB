{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\albuq\\\\Downloads\\\\dota-hero-tracker\\\\frontend\\\\src\\\\components\\\\RightHalf.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport axios from 'axios';\nimport { heroNamesMapping, heroImagesMapping } from './heroMapping';\nimport '../HeroStyles.css'; // Ensure this imports the correct CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LeftHalf() {\n  _s();\n  const [bestTurboHeroes, setBestTurboHeroes] = useState([]);\n  useEffect(() => {\n    const fetchBestHeroes = async () => {\n      try {\n        const response = await axios.get('http://localhost:3000/matches');\n        const matches = response.data;\n\n        // Calculate stats for Turbo matches\n        const turboMatches = matches.filter(match => match.game_mode === 23);\n        const turboHeroStats = calculateHeroStats(turboMatches);\n\n        // Determine top 3 heroes for Turbo\n        const topTurboHeroes = determineTopHeroes(turboHeroStats);\n\n        // Set state to render the top Turbo heroes\n        setBestTurboHeroes(topTurboHeroes);\n      } catch (error) {\n        console.error('Error fetching best heroes:', error);\n      }\n    };\n    fetchBestHeroes();\n  }, []);\n\n  // Function to calculate hero statistics\n  const calculateHeroStats = matches => {\n    const heroStats = {};\n    matches.forEach(match => {\n      const heroId = match.hero_id;\n      if (!heroStats[heroId]) {\n        heroStats[heroId] = {\n          wins: 0,\n          matchesCount: 0\n        };\n      }\n      heroStats[heroId].matchesCount++;\n      heroStats[heroId].wins += match.win ? 1 : 0;\n    });\n    return heroStats;\n  };\n\n  // Function to determine top 3 heroes based on stats\n  const determineTopHeroes = heroStats => {\n    const heroesWithStats = Object.keys(heroStats).map(heroId => {\n      const stats = heroStats[heroId];\n      const winRate = stats.matchesCount > 0 ? stats.wins / stats.matchesCount * 100 : 0;\n      return {\n        heroId: parseInt(heroId),\n        winRate,\n        matchesCount: stats.matchesCount\n      };\n    });\n\n    // Sort heroes by win rate (descending)\n    heroesWithStats.sort((a, b) => b.winRate - a.winRate);\n\n    // Select the top 3 heroes\n    return heroesWithStats.slice(0, 3);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      backgroundColor: '#ffcccc',\n      width: '50%',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      border: '1px solid black',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      children: \"Best Turbo Heroes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), bestTurboHeroes.map((hero, index) => /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        marginBottom: '20px',\n        width: '100%',\n        border: '1px dashed #333',\n        padding: '10px',\n        display: 'flex',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `hero-image ${heroImagesMapping[hero.heroId]}` // Ensure correct hero image class\n        ,\n        style: {\n          transform: 'scale(1.2)',\n          width: '50px',\n          height: '50px'\n        } // Adjust size and scaling as needed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          marginLeft: '10px'\n        },\n        children: [\" \", /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: [index + 1, \". Hero: \", heroNamesMapping[hero.heroId] || 'Unknown Hero']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: [\"Win Rate: \", hero.winRate.toFixed(2), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: [\"Total Matches: \", hero.matchesCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, hero.heroId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(LeftHalf, \"NpbSocOSZBW/BqLiA0sLPOpY82M=\");\n_c = LeftHalf;\nexport default LeftHalf;\nvar _c;\n$RefreshReg$(_c, \"LeftHalf\");","map":{"version":3,"names":["React","useEffect","useState","Box","Typography","axios","heroNamesMapping","heroImagesMapping","jsxDEV","_jsxDEV","LeftHalf","_s","bestTurboHeroes","setBestTurboHeroes","fetchBestHeroes","response","get","matches","data","turboMatches","filter","match","game_mode","turboHeroStats","calculateHeroStats","topTurboHeroes","determineTopHeroes","error","console","heroStats","forEach","heroId","hero_id","wins","matchesCount","win","heroesWithStats","Object","keys","map","stats","winRate","parseInt","sort","a","b","slice","sx","backgroundColor","width","display","flexDirection","alignItems","border","padding","children","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","hero","index","marginBottom","className","style","transform","height","marginLeft","toFixed","_c","$RefreshReg$"],"sources":["C:/Users/albuq/Downloads/dota-hero-tracker/frontend/src/components/RightHalf.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Box, Typography } from '@mui/material';\r\nimport axios from 'axios';\r\nimport { heroNamesMapping, heroImagesMapping } from './heroMapping';\r\nimport '../HeroStyles.css'; // Ensure this imports the correct CSS file\r\n\r\nfunction LeftHalf() {\r\n  const [bestTurboHeroes, setBestTurboHeroes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchBestHeroes = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:3000/matches');\r\n        const matches = response.data;\r\n\r\n        // Calculate stats for Turbo matches\r\n        const turboMatches = matches.filter(match => match.game_mode === 23);\r\n        const turboHeroStats = calculateHeroStats(turboMatches);\r\n\r\n        // Determine top 3 heroes for Turbo\r\n        const topTurboHeroes = determineTopHeroes(turboHeroStats);\r\n\r\n        // Set state to render the top Turbo heroes\r\n        setBestTurboHeroes(topTurboHeroes);\r\n      } catch (error) {\r\n        console.error('Error fetching best heroes:', error);\r\n      }\r\n    };\r\n\r\n    fetchBestHeroes();\r\n  }, []);\r\n\r\n  // Function to calculate hero statistics\r\n  const calculateHeroStats = (matches) => {\r\n    const heroStats = {};\r\n\r\n    matches.forEach(match => {\r\n      const heroId = match.hero_id;\r\n\r\n      if (!heroStats[heroId]) {\r\n        heroStats[heroId] = {\r\n          wins: 0,\r\n          matchesCount: 0\r\n        };\r\n      }\r\n\r\n      heroStats[heroId].matchesCount++;\r\n      heroStats[heroId].wins += match.win ? 1 : 0;\r\n    });\r\n\r\n    return heroStats;\r\n  };\r\n\r\n  // Function to determine top 3 heroes based on stats\r\n  const determineTopHeroes = (heroStats) => {\r\n    const heroesWithStats = Object.keys(heroStats).map(heroId => {\r\n      const stats = heroStats[heroId];\r\n      const winRate = stats.matchesCount > 0 ? (stats.wins / stats.matchesCount) * 100 : 0;\r\n\r\n      return {\r\n        heroId: parseInt(heroId),\r\n        winRate,\r\n        matchesCount: stats.matchesCount\r\n      };\r\n    });\r\n\r\n    // Sort heroes by win rate (descending)\r\n    heroesWithStats.sort((a, b) => b.winRate - a.winRate);\r\n\r\n    // Select the top 3 heroes\r\n    return heroesWithStats.slice(0, 3);\r\n  };\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        backgroundColor: '#ffcccc',\r\n        width: '50%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        border: '1px solid black',\r\n        padding: '20px',\r\n      }}\r\n    >\r\n      {/* Display top Turbo heroes */}\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Best Turbo Heroes\r\n      </Typography>\r\n      {bestTurboHeroes.map((hero, index) => (\r\n        <Box\r\n          key={hero.heroId}\r\n          sx={{\r\n            marginBottom: '20px',\r\n            width: '100%',\r\n            border: '1px dashed #333',\r\n            padding: '10px',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n          }}\r\n        >\r\n          {/* Hero Image */}\r\n          <div\r\n            className={`hero-image ${heroImagesMapping[hero.heroId]}`} // Ensure correct hero image class\r\n            style={{ transform: 'scale(1.2)', width: '50px', height: '50px' }} // Adjust size and scaling as needed\r\n          ></div>\r\n\r\n          {/* Hero Stats */}\r\n          <Box sx={{ marginLeft: '10px' }}> {/* Add margin to separate image and text */}\r\n            <Typography variant=\"body1\">\r\n              {index + 1}. Hero: {heroNamesMapping[hero.heroId] || 'Unknown Hero'}\r\n            </Typography>\r\n            <Typography variant=\"body1\">\r\n              Win Rate: {hero.winRate.toFixed(2)}%\r\n            </Typography>\r\n            <Typography variant=\"body1\">\r\n              Total Matches: {hero.matchesCount}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      ))}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default LeftHalf;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}