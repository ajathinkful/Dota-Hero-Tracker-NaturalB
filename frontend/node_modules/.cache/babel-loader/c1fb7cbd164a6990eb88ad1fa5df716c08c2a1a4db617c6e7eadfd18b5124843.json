{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\albuq\\\\Downloads\\\\dota-hero-tracker\\\\frontend\\\\src\\\\components\\\\LeftHalf.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Box, Typography } from '@mui/material';\nimport axios from 'axios';\nimport heroMapping from './heroMapping'; // Import the hero mapping\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LeftHalf() {\n  _s();\n  const [bestHeroes, setBestHeroes] = useState([]);\n  useEffect(() => {\n    const fetchBestHeroes = async () => {\n      try {\n        const response = await axios.get('http://localhost:3000/matches');\n        const matches = response.data;\n\n        // Calculate stats for each hero\n        const heroStats = {};\n        matches.forEach(match => {\n          const heroId = match.hero_id;\n\n          // Initialize stats if not already exists\n          if (!heroStats[heroId]) {\n            heroStats[heroId] = {\n              wins: 0,\n              losses: 0,\n              gpmTotal: 0,\n              killsTotal: 0,\n              deathsTotal: 0,\n              assistsTotal: 0,\n              matchesCount: 0\n            };\n          }\n\n          // Increment stats based on match data\n          heroStats[heroId].matchesCount++;\n          heroStats[heroId].wins += match.win ? 1 : 0;\n          heroStats[heroId].losses += match.win ? 0 : 1;\n          heroStats[heroId].gpmTotal += match.gold_per_min;\n          heroStats[heroId].killsTotal += match.kills;\n          heroStats[heroId].deathsTotal += match.deaths;\n          heroStats[heroId].assistsTotal += match.assists;\n        });\n\n        // Calculate win rate, average GPM, and KDA ratio for each hero\n        const heroesWithStats = Object.keys(heroStats).map(heroId => {\n          const stats = heroStats[heroId];\n          const winRate = stats.matchesCount > 0 ? stats.wins / stats.matchesCount * 100 : 0;\n          const averageGPM = stats.matchesCount > 0 ? stats.gpmTotal / stats.matchesCount : 0;\n          const kdaRatio = stats.deathsTotal > 0 ? ((stats.killsTotal + stats.assistsTotal) / stats.deathsTotal).toFixed(2) : 0;\n          return {\n            heroId: parseInt(heroId),\n            winRate,\n            averageGPM,\n            kdaRatio\n          };\n        });\n\n        // Sort heroes by win rate (descending), then by average GPM (descending), then by KDA ratio (descending)\n        heroesWithStats.sort((a, b) => {\n          if (a.winRate !== b.winRate) {\n            return b.winRate - a.winRate;\n          }\n          if (a.averageGPM !== b.averageGPM) {\n            return b.averageGPM - a.averageGPM;\n          }\n          return b.kdaRatio - a.kdaRatio;\n        });\n\n        // Select the top 3 heroes\n        const topHeroes = heroesWithStats.slice(0, 3);\n\n        // Set state to render the top heroes\n        setBestHeroes(topHeroes);\n      } catch (error) {\n        console.error('Error fetching best heroes:', error);\n      }\n    };\n    fetchBestHeroes();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      backgroundColor: '#ffcccc',\n      width: '50%',\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      border: '1px solid black',\n      padding: '20px'\n    },\n    children: bestHeroes.map((hero, index) => /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        marginBottom: '20px',\n        width: '100%',\n        border: '1px dashed #333',\n        padding: '10px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        gutterBottom: true,\n        children: [\"Best Hero \", index + 1]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: [\"Hero: \", heroMapping[hero.heroId] || 'Unknown Hero']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: [\"Win Rate: \", hero.winRate.toFixed(2), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: [\"Average GPM: \", hero.averageGPM.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        children: [\"KDA Ratio: \", hero.kdaRatio]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)]\n    }, hero.heroId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(LeftHalf, \"+J3qS5OgiRXobGpJu2eXKzm15pw=\");\n_c = LeftHalf;\nexport default LeftHalf;\nvar _c;\n$RefreshReg$(_c, \"LeftHalf\");","map":{"version":3,"names":["React","useEffect","useState","Box","Typography","axios","heroMapping","jsxDEV","_jsxDEV","LeftHalf","_s","bestHeroes","setBestHeroes","fetchBestHeroes","response","get","matches","data","heroStats","forEach","match","heroId","hero_id","wins","losses","gpmTotal","killsTotal","deathsTotal","assistsTotal","matchesCount","win","gold_per_min","kills","deaths","assists","heroesWithStats","Object","keys","map","stats","winRate","averageGPM","kdaRatio","toFixed","parseInt","sort","a","b","topHeroes","slice","error","console","sx","backgroundColor","width","display","flexDirection","alignItems","border","padding","children","hero","index","marginBottom","variant","gutterBottom","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/albuq/Downloads/dota-hero-tracker/frontend/src/components/LeftHalf.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Box, Typography } from '@mui/material';\r\nimport axios from 'axios';\r\nimport heroMapping from './heroMapping'; // Import the hero mapping\r\n\r\nfunction LeftHalf() {\r\n  const [bestHeroes, setBestHeroes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchBestHeroes = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:3000/matches');\r\n        const matches = response.data;\r\n\r\n        // Calculate stats for each hero\r\n        const heroStats = {};\r\n\r\n        matches.forEach(match => {\r\n          const heroId = match.hero_id;\r\n\r\n          // Initialize stats if not already exists\r\n          if (!heroStats[heroId]) {\r\n            heroStats[heroId] = {\r\n              wins: 0,\r\n              losses: 0,\r\n              gpmTotal: 0,\r\n              killsTotal: 0,\r\n              deathsTotal: 0,\r\n              assistsTotal: 0,\r\n              matchesCount: 0\r\n            };\r\n          }\r\n\r\n          // Increment stats based on match data\r\n          heroStats[heroId].matchesCount++;\r\n          heroStats[heroId].wins += match.win ? 1 : 0;\r\n          heroStats[heroId].losses += match.win ? 0 : 1;\r\n          heroStats[heroId].gpmTotal += match.gold_per_min;\r\n          heroStats[heroId].killsTotal += match.kills;\r\n          heroStats[heroId].deathsTotal += match.deaths;\r\n          heroStats[heroId].assistsTotal += match.assists;\r\n        });\r\n\r\n        // Calculate win rate, average GPM, and KDA ratio for each hero\r\n        const heroesWithStats = Object.keys(heroStats).map(heroId => {\r\n          const stats = heroStats[heroId];\r\n          const winRate = stats.matchesCount > 0 ? (stats.wins / stats.matchesCount) * 100 : 0;\r\n          const averageGPM = stats.matchesCount > 0 ? stats.gpmTotal / stats.matchesCount : 0;\r\n          const kdaRatio = stats.deathsTotal > 0 ? ((stats.killsTotal + stats.assistsTotal) / stats.deathsTotal).toFixed(2) : 0;\r\n\r\n          return {\r\n            heroId: parseInt(heroId),\r\n            winRate,\r\n            averageGPM,\r\n            kdaRatio\r\n          };\r\n        });\r\n\r\n        // Sort heroes by win rate (descending), then by average GPM (descending), then by KDA ratio (descending)\r\n        heroesWithStats.sort((a, b) => {\r\n          if (a.winRate !== b.winRate) {\r\n            return b.winRate - a.winRate;\r\n          }\r\n          if (a.averageGPM !== b.averageGPM) {\r\n            return b.averageGPM - a.averageGPM;\r\n          }\r\n          return b.kdaRatio - a.kdaRatio;\r\n        });\r\n\r\n        // Select the top 3 heroes\r\n        const topHeroes = heroesWithStats.slice(0, 3);\r\n\r\n        // Set state to render the top heroes\r\n        setBestHeroes(topHeroes);\r\n      } catch (error) {\r\n        console.error('Error fetching best heroes:', error);\r\n      }\r\n    };\r\n\r\n    fetchBestHeroes();\r\n  }, []);\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        backgroundColor: '#ffcccc',\r\n        width: '50%',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        border: '1px solid black',\r\n        padding: '20px',\r\n      }}\r\n    >\r\n      {bestHeroes.map((hero, index) => (\r\n        <Box\r\n          key={hero.heroId}\r\n          sx={{\r\n            marginBottom: '20px',\r\n            width: '100%',\r\n            border: '1px dashed #333',\r\n            padding: '10px',\r\n          }}\r\n        >\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Best Hero {index + 1}\r\n          </Typography>\r\n          <Typography variant=\"body1\">\r\n            Hero: {heroMapping[hero.heroId] || 'Unknown Hero'}\r\n          </Typography>\r\n          <Typography variant=\"body1\">\r\n            Win Rate: {hero.winRate.toFixed(2)}%\r\n          </Typography>\r\n          <Typography variant=\"body1\">\r\n            Average GPM: {hero.averageGPM.toFixed(2)}\r\n          </Typography>\r\n          <Typography variant=\"body1\">\r\n            KDA Ratio: {hero.kdaRatio}\r\n          </Typography>\r\n        </Box>\r\n      ))}\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default LeftHalf;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,GAAG,EAAEC,UAAU,QAAQ,eAAe;AAC/C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,eAAe,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAClB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACd,MAAMY,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,+BAA+B,CAAC;QACjE,MAAMC,OAAO,GAAGF,QAAQ,CAACG,IAAI;;QAE7B;QACA,MAAMC,SAAS,GAAG,CAAC,CAAC;QAEpBF,OAAO,CAACG,OAAO,CAACC,KAAK,IAAI;UACvB,MAAMC,MAAM,GAAGD,KAAK,CAACE,OAAO;;UAE5B;UACA,IAAI,CAACJ,SAAS,CAACG,MAAM,CAAC,EAAE;YACtBH,SAAS,CAACG,MAAM,CAAC,GAAG;cAClBE,IAAI,EAAE,CAAC;cACPC,MAAM,EAAE,CAAC;cACTC,QAAQ,EAAE,CAAC;cACXC,UAAU,EAAE,CAAC;cACbC,WAAW,EAAE,CAAC;cACdC,YAAY,EAAE,CAAC;cACfC,YAAY,EAAE;YAChB,CAAC;UACH;;UAEA;UACAX,SAAS,CAACG,MAAM,CAAC,CAACQ,YAAY,EAAE;UAChCX,SAAS,CAACG,MAAM,CAAC,CAACE,IAAI,IAAIH,KAAK,CAACU,GAAG,GAAG,CAAC,GAAG,CAAC;UAC3CZ,SAAS,CAACG,MAAM,CAAC,CAACG,MAAM,IAAIJ,KAAK,CAACU,GAAG,GAAG,CAAC,GAAG,CAAC;UAC7CZ,SAAS,CAACG,MAAM,CAAC,CAACI,QAAQ,IAAIL,KAAK,CAACW,YAAY;UAChDb,SAAS,CAACG,MAAM,CAAC,CAACK,UAAU,IAAIN,KAAK,CAACY,KAAK;UAC3Cd,SAAS,CAACG,MAAM,CAAC,CAACM,WAAW,IAAIP,KAAK,CAACa,MAAM;UAC7Cf,SAAS,CAACG,MAAM,CAAC,CAACO,YAAY,IAAIR,KAAK,CAACc,OAAO;QACjD,CAAC,CAAC;;QAEF;QACA,MAAMC,eAAe,GAAGC,MAAM,CAACC,IAAI,CAACnB,SAAS,CAAC,CAACoB,GAAG,CAACjB,MAAM,IAAI;UAC3D,MAAMkB,KAAK,GAAGrB,SAAS,CAACG,MAAM,CAAC;UAC/B,MAAMmB,OAAO,GAAGD,KAAK,CAACV,YAAY,GAAG,CAAC,GAAIU,KAAK,CAAChB,IAAI,GAAGgB,KAAK,CAACV,YAAY,GAAI,GAAG,GAAG,CAAC;UACpF,MAAMY,UAAU,GAAGF,KAAK,CAACV,YAAY,GAAG,CAAC,GAAGU,KAAK,CAACd,QAAQ,GAAGc,KAAK,CAACV,YAAY,GAAG,CAAC;UACnF,MAAMa,QAAQ,GAAGH,KAAK,CAACZ,WAAW,GAAG,CAAC,GAAG,CAAC,CAACY,KAAK,CAACb,UAAU,GAAGa,KAAK,CAACX,YAAY,IAAIW,KAAK,CAACZ,WAAW,EAAEgB,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC;UAErH,OAAO;YACLtB,MAAM,EAAEuB,QAAQ,CAACvB,MAAM,CAAC;YACxBmB,OAAO;YACPC,UAAU;YACVC;UACF,CAAC;QACH,CAAC,CAAC;;QAEF;QACAP,eAAe,CAACU,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;UAC7B,IAAID,CAAC,CAACN,OAAO,KAAKO,CAAC,CAACP,OAAO,EAAE;YAC3B,OAAOO,CAAC,CAACP,OAAO,GAAGM,CAAC,CAACN,OAAO;UAC9B;UACA,IAAIM,CAAC,CAACL,UAAU,KAAKM,CAAC,CAACN,UAAU,EAAE;YACjC,OAAOM,CAAC,CAACN,UAAU,GAAGK,CAAC,CAACL,UAAU;UACpC;UACA,OAAOM,CAAC,CAACL,QAAQ,GAAGI,CAAC,CAACJ,QAAQ;QAChC,CAAC,CAAC;;QAEF;QACA,MAAMM,SAAS,GAAGb,eAAe,CAACc,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;;QAE7C;QACArC,aAAa,CAACoC,SAAS,CAAC;MAC1B,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACrD;IACF,CAAC;IAEDrC,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA,CAACL,GAAG;IACFiD,EAAE,EAAE;MACFC,eAAe,EAAE,SAAS;MAC1BC,KAAK,EAAE,KAAK;MACZC,OAAO,EAAE,MAAM;MACfC,aAAa,EAAE,QAAQ;MACvBC,UAAU,EAAE,QAAQ;MACpBC,MAAM,EAAE,iBAAiB;MACzBC,OAAO,EAAE;IACX,CAAE;IAAAC,QAAA,EAEDjD,UAAU,CAAC2B,GAAG,CAAC,CAACuB,IAAI,EAAEC,KAAK,kBAC1BtD,OAAA,CAACL,GAAG;MAEFiD,EAAE,EAAE;QACFW,YAAY,EAAE,MAAM;QACpBT,KAAK,EAAE,MAAM;QACbI,MAAM,EAAE,iBAAiB;QACzBC,OAAO,EAAE;MACX,CAAE;MAAAC,QAAA,gBAEFpD,OAAA,CAACJ,UAAU;QAAC4D,OAAO,EAAC,IAAI;QAACC,YAAY;QAAAL,QAAA,GAAC,YAC1B,EAACE,KAAK,GAAG,CAAC;MAAA;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,eACb7D,OAAA,CAACJ,UAAU;QAAC4D,OAAO,EAAC,OAAO;QAAAJ,QAAA,GAAC,QACpB,EAACtD,WAAW,CAACuD,IAAI,CAACxC,MAAM,CAAC,IAAI,cAAc;MAAA;QAAA6C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC,eACb7D,OAAA,CAACJ,UAAU;QAAC4D,OAAO,EAAC,OAAO;QAAAJ,QAAA,GAAC,YAChB,EAACC,IAAI,CAACrB,OAAO,CAACG,OAAO,CAAC,CAAC,CAAC,EAAC,GACrC;MAAA;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,eACb7D,OAAA,CAACJ,UAAU;QAAC4D,OAAO,EAAC,OAAO;QAAAJ,QAAA,GAAC,eACb,EAACC,IAAI,CAACpB,UAAU,CAACE,OAAO,CAAC,CAAC,CAAC;MAAA;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B,CAAC,eACb7D,OAAA,CAACJ,UAAU;QAAC4D,OAAO,EAAC,OAAO;QAAAJ,QAAA,GAAC,aACf,EAACC,IAAI,CAACnB,QAAQ;MAAA;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACf,CAAC;IAAA,GAtBRR,IAAI,CAACxC,MAAM;MAAA6C,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAuBb,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAAC3D,EAAA,CAtHQD,QAAQ;AAAA6D,EAAA,GAAR7D,QAAQ;AAwHjB,eAAeA,QAAQ;AAAC,IAAA6D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}